class Node:
    def __init__(self, valor):
        self.valor = valor
        self.left = None
        self.right = None

class ArvoreBST:
    def __init__(self):
        self.root = None

    def inserir(self, valor):
        def _inserir(node, valor):
            if node is None:
                return Node(valor)
            if valor < node.valor:
                node.left = _inserir(node.left, valor)
            else:
                node.right = _inserir(node.right, valor)
            return node

        self.root = _inserir(self.root, valor)

    def remover(self, valor):
        def _min_value_node(n):
            atual = n
            while atual.left:
                atual = atual.left
            return atual

        def _remover(node, valor):
            if node is None:
                return node
            if valor < node.valor:
                node.left = _remover(node.left, valor)
            elif valor > node.valor:
                node.right = _remover(node.right, valor)
            else:
                if node.left is None:
                    return node.right
                elif node.right is None:
                    return node.left
                temp = _min_value_node(node.right)
                node.valor = temp.valor
                node.right = _remover(node.right, temp.valor)
            return node

        self.root = _remover(self.root, valor)

    def buscar(self, valor):
        def _buscar(node, valor):
            if node is None or node.valor == valor:
                return node
            if valor < node.valor:
                return _buscar(node.left, valor)
            return _buscar(node.right, valor)

        return _buscar(self.root, valor)

    def print_estrutura(self, node=None, prefix="", is_left=True):
        if node is None:
            node = self.root
        if node.right:
            self.print_estrutura(node.right, prefix + ("│   " if is_left else "    "), False)
        print(prefix + ("└── " if is_left else "┌── ") + str(node.valor))
        if node.left:
            self.print_estrutura(node.left, prefix + ("    " if is_left else "│   "), True)


# Simulação
arvore = ArvoreBST()

# Inserções
for valor in [10, 5, 15, 2, 7, 20]:
    arvore.inserir(valor)

print("\nÁrvore após inserções:")
arvore.print_estrutura()

# Remoção
arvore.remover(15)
print("\nÁrvore após remover 15:")
arvore.print_estrutura()

# Busca
print("\nBusca por 7:")
encontrado = arvore.buscar(7)
print("Encontrado!" if encontrado else "Não encontrado.")
