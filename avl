# Classe que representa um nÃ³ da Ã¡rvore AVL
class Node:
    def __init__(self, key):
        self.key = key            # Valor armazenado no nÃ³
        self.left = None          # SubÃ¡rvore Ã  esquerda
        self.right = None         # SubÃ¡rvore Ã  direita
        self.height = 1           # Altura do nÃ³ para cÃ¡lculo de balanceamento

# Classe que representa a estrutura da Ã¡rvore AVL
class AVLTree:
    def __init__(self):
        self.root = None          # Raiz da Ã¡rvore

    # MÃ©todo para inserir um valor na Ã¡rvore
    def insert(self, root, key):
        if not root:
            return Node(key)      # Caso base: insere novo nÃ³
        elif key < root.key:
            root.left = self.insert(root.left, key)  # Insere na subÃ¡rvore esquerda
        else:
            root.right = self.insert(root.right, key)  # Insere na subÃ¡rvore direita

        # Atualiza a altura do nÃ³ apÃ³s inserÃ§Ã£o
        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))

        # Verifica o fator de balanceamento
        balance = self.get_balance(root)

        # Caso 1: desbalanceado para esquerda (rotaÃ§Ã£o simples Ã  direita)
        if balance > 1 and key < root.left.key:
            return self.right_rotate(root)

        # Caso 2: desbalanceado para direita (rotaÃ§Ã£o simples Ã  esquerda)
        if balance < -1 and key > root.right.key:
            return self.left_rotate(root)


        
    # MÃ©todo para deletar um nÃ³ da Ã¡rvore
    def delete(self, root, key):
        if not root:
            return root  # NÃ³ nÃ£o encontrado

        if key < root.key:
            root.left = self.delete(root.left, key)  # Busca na esquerda
        elif key > root.key:
            root.right = self.delete(root.right, key)  # Busca na direita
        else:
            # Caso 1: nÃ³ sem filhos
            if root.left is None and root.right is None:
                root = None
            # Caso 2: nÃ³ com apenas filho Ã  esquerda
            elif root.left is not None and root.right is None:
                root = root.left
            # Caso 3: nÃ³ com apenas filho Ã  direita
            elif root.right is not None and root.left is None:
                root = root.right
            # Caso 4: nÃ³ com dois filhos
            else:
                temp = self.get_min_value_node(root.right)  # Menor valor na subÃ¡rvore direita
                root.key = temp.key  # Substitui chave
                root.right = self.delete(root.right, temp.key)  # Remove duplicata

        if not root:
            return root  # Se a Ã¡rvore ficou vazia

        # Atualiza altura
        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))

        # Verifica e corrige desbalanceamento
        balance = self.get_balance(root)

        if balance > 1 and self.get_balance(root.left) >= 0:
            return self.right_rotate(root)
        if balance < -1 and self.get_balance(root.right) <= 0:
            return self.left_rotate(root)
        if balance > 1 and self.get_balance(root.left) < 0:
            root.left = self.left_rotate(root.left)
            return self.right_rotate(root)
        if balance < -1 and self.get_balance(root.right) > 0:
            root.right = self.right_rotate(root.right)
            return self.left_rotate(root)

        return root

    # Percurso prÃ©-ordem: raiz â†’ esquerda â†’ direita
    def pre_order(self, root):
        if root:
            print("{0} ".format(root.key), end="")
            self.pre_order(root.left)
            self.pre_order(root.right)

    # Percurso em-ordem: esquerda â†’ raiz â†’ direita
    def in_order(self, root):
        if root:
            self.in_order(root.left)
            print("{0} ".format(root.key), end="")
            self.in_order(root.right)

    # Percurso pÃ³s-ordem: esquerda â†’ direita â†’ raiz
    def post_order(self, root):
        if root:
            self.post_order(root.left)
            self.post_order(root.right)
            print("{0} ".format(root.key), end="")

    # 3 - RotaÃ§Ã£o simples Ã  esquerda
    def left_rotate(self, z):
        y = z.right
        T2 = y.left

        # Realiza rotaÃ§Ã£o
        y.left = z
        z.right = T2

        # Atualiza alturas
        z.height = 1 + max(self.get_height(z.left), self.get_height(z.right))
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))

        return y  # Nova raiz da subÃ¡rvore

    # 3 - RotaÃ§Ã£o simples Ã  direita
    def right_rotate(self, z):
        y = z.left
        T3 = y.right

        # Realiza rotaÃ§Ã£o
        y.right = z
        z.left = T3

        # Atualiza alturas
        z.height = 1 + max(self.get_height(z.left), self.get_height(z.right))
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))

        return y  # Nova raiz da subÃ¡rvore

    # 1 - Retorna altura de um nÃ³
    def get_height(self, root):
        if not root:
            return 0
        return root.height

    # 2 - Calcula o fator de balanceamento
    def get_balance(self, root):
        if not root:
            return 0
        return self.get_height(root.left) - self.get_height(root.right)

    # Encontra nÃ³ com o menor valor (usado na remoÃ§Ã£o de nÃ³ com dois filhos)
    def get_min_value_node(self, root):
        if root is None or root.left is None:
            return root
        return self.get_min_value_node(root.left)

# -----------------------------
# Exemplo de uso da Ã¡rvore AVL
avltree = AVLTree()
root = None

# Inserir transaÃ§Ãµes
transacoes = [10, 20, 30, 40, 50, 25]
for transacao in transacoes:
    root = avltree.insert(root, transacao)

# Remover uma transaÃ§Ã£o
root = avltree.delete(root, 20)

# Exibir os percursos
print("Pre-order traversal:")
avltree.pre_order(root)

print("\nIn-order traversal:")
avltree.in_order(root)

print("\nPost-order traversal:")
avltree.post_order(root)
